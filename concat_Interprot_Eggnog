#O arquivo veio desformatado, contendo numero de colunas irregular, colunas com caracter em branco e também "-".
 #Script que filtra e formata a coluna dos GOS terms do InterprotScan

nano filtrarGO.py                                                                                              

import pandas as pd

def remover_genes_sem_go(input_file, output_file):
    # Ler o arquivo manualmente linha por linha
    with open(input_file, 'r') as file:
        lines = file.readlines()

    # Processar as linhas para manter apenas as válidas
    valid_lines = []
    for line in lines:
        columns = line.strip().split('\t')
        if len(columns) == 2:  # Verifica se há exatamente duas colunas (Gene e GO_terms)
            gene, go_terms = columns
            if go_terms != '-' and go_terms.strip() != '':  # Filtra GOs válidos
                valid_lines.append(f"{gene}\t{go_terms}\n")

    # Escrever as linhas válidas no arquivo de saída
    with open(output_file, 'w') as out_file:
        out_file.writelines(valid_lines)

    print(f"Genes com GO terms válidos foram salvos em {output_file}")

# Configurações
input_file = "Interprot_GOterms_sorted"  # Substitua pelo caminho do seu arquivo de entrada
output_file = "genes_com_go_terms_filtered.txt"  # Arquivo de saída

# Executar a função
remover_genes_sem_go(input_file, output_file)
_____________________________________
#você pode usar o seguinte script em Python para combinar os GO terms para genes com o mesmo ID do Interprot

import pandas as pd
from collections import defaultdict

def combinar_go_terms(input_file, output_file):
    # Dicionário para armazenar os GO terms combinados para cada gene
    go_terms_dict = defaultdict(set)

    # Ler o arquivo linha por linha
    with open(input_file, 'r') as file:
        for line in file:
            line = line.strip()
            if line:  # Ignorar linhas vazias
                gene_id, go_terms = line.split('\t')
                # Adicionar os GO terms ao conjunto correspondente ao gene_id
                go_terms_dict[gene_id].update(go_terms.split('|'))

    # Escrever os GO terms combinados em um novo arquivo
    with open(output_file, 'w') as file:
        file.write('Gene\tGO_terms\n')
        for gene_id, go_set in go_terms_dict.items():
            combined_go_terms = '|'.join(sorted(go_set))  # Ordenar GO terms para consistência
            file.write(f'{gene_id}\t{combined_go_terms}\n')

# Configurações
input_file = 'genes_com_go_terms_filtered.txt'
output_file = 'genes_combined_go_terms.txt'

# Executar a função
combinar_go_terms(input_file, output_file)
________________________________________________________________
import pandas as pd

# Load the files
genes_file = 'genes_combined_go_terms.txt'
eggnog_file = 'eggNOG_Mapper_annotations.tabular'

# Read the genes combined GO terms file
genes_df = pd.read_csv(genes_file, sep='\t', names=['Gene', 'GO_terms'])

# Read the eggNOG annotations file
eggnog_df = pd.read_csv(eggnog_file, sep='\t')

# Merge the two dataframes on the gene ID
merged_df = eggnog_df.merge(genes_df, left_on='#query', right_on='Gene', how='left')

# Replace the GOs column with the new GO_terms
merged_df['GOs'] = merged_df['GO_terms']

# Drop the unnecessary columns
merged_df.drop(columns=['Gene', 'GO_terms'], inplace=True)

# Save the updated dataframe to a new file
output_file = 'updated_eggNOG_annotations.tabular'
merged_df.to_csv(output_file, sep='\t', index=False)

print(f"Updated file saved as {output_file}")
______________________________________________________________________
#inserir - no lugar de espaços vazios para contar
import pandas as pd

# Load the updated eggNOG annotations file
file_path = '/mnt/data/updated_eggNOG_annotations.tabular'
df = pd.read_csv(file_path, sep='\t')

# Replace empty values in the GO terms column with '-'
df['GOs'] = df['GOs'].apply(lambda x: '-' if pd.isna(x) or str(x).strip() == '' else x)

# Save the updated DataFrame to a new file
output_file_path = '/mnt/data/updated_eggNOG_annotations_fixed.tabular'
df.to_csv(output_file_path, sep='\t', index=False)

print("GO terms have been formatted. Empty values replaced with '-'.")

___________________________________________________________________________
#APPEND PFAM DO EGGNOG FILE
import pandas as pd

def add_pfam_column(eggnog_file, pfam_file, output_file):
    # Load the eggNOG annotations
    eggnog_df = pd.read_csv(eggnog_file, sep='\t', dtype=str)
    
    # Load the PFAM annotations
    pfam_df = pd.read_csv(pfam_file, sep='\t', names=['Gene', 'PFAM'], dtype=str)
    
    # Merge the eggNOG file with the PFAM annotations based on the 'Gene' column
    merged_df = pd.merge(eggnog_df, pfam_df, left_on=eggnog_df.columns[0], right_on='Gene', how='left')
    
    # Drop the extra 'Gene' column from the pfam_df
    merged_df.drop(columns=['Gene'], inplace=True)
    
    # Save the updated DataFrame with the new PFAM column
    merged_df.to_csv(output_file, sep='\t', index=False)

if __name__ == "__main__":
    eggnog_file = '/mnt/data/eggNOG_Mapper_annotations.tabular'  # Path to the eggNOG file
    pfam_file = '/mnt/data/genes_combined_go_terms.txt'           # Path to the PFAM file (assuming the same file contains PFAM data)
    output_file = '/mnt/data/eggnog_with_pfam.tabular'            # Output file path

    add_pfam_column(eggnog_file, pfam_file, output_file)
    print("PFAM column added and output saved to", output_file)
__________________________________________________________________________________
#APPEND INTERPROT ID TO EGGNOG FILE



