#O arquivo veio desformatado, contendo numero de colunas irregular, colunas com caracter em branco e também "-".
 #Script que filtra e formata a coluna dos GOS terms do InterprotScan

nano filtrarGO.py                                                                                              

import pandas as pd

def remover_genes_sem_go(input_file, output_file):
    # Ler o arquivo manualmente linha por linha
    with open(input_file, 'r') as file:
        lines = file.readlines()

    # Processar as linhas para manter apenas as válidas
    valid_lines = []
    for line in lines:
        columns = line.strip().split('\t')
        if len(columns) == 2:  # Verifica se há exatamente duas colunas (Gene e GO_terms)
            gene, go_terms = columns
            if go_terms != '-' and go_terms.strip() != '':  # Filtra GOs válidos
                valid_lines.append(f"{gene}\t{go_terms}\n")

    # Escrever as linhas válidas no arquivo de saída
    with open(output_file, 'w') as out_file:
        out_file.writelines(valid_lines)

    print(f"Genes com GO terms válidos foram salvos em {output_file}")

# Configurações
input_file = "Interprot_GOterms_sorted"  # Substitua pelo caminho do seu arquivo de entrada
output_file = "genes_com_go_terms_filtered.txt"  # Arquivo de saída

# Executar a função
remover_genes_sem_go(input_file, output_file)
_____________________________________
#você pode usar o seguinte script em Python para combinar os GO terms para genes com o mesmo ID do Interprot

import pandas as pd
from collections import defaultdict

def combinar_go_terms(input_file, output_file):
    # Dicionário para armazenar os GO terms combinados para cada gene
    go_terms_dict = defaultdict(set)

    # Ler o arquivo linha por linha
    with open(input_file, 'r') as file:
        for line in file:
            line = line.strip()
            if line:  # Ignorar linhas vazias
                gene_id, go_terms = line.split('\t')
                # Adicionar os GO terms ao conjunto correspondente ao gene_id
                go_terms_dict[gene_id].update(go_terms.split('|'))

    # Escrever os GO terms combinados em um novo arquivo
    with open(output_file, 'w') as file:
        file.write('Gene\tGO_terms\n')
        for gene_id, go_set in go_terms_dict.items():
            combined_go_terms = '|'.join(sorted(go_set))  # Ordenar GO terms para consistência
            file.write(f'{gene_id}\t{combined_go_terms}\n')

# Configurações
input_file = 'genes_com_go_terms_filtered.txt'
output_file = 'genes_combined_go_terms.txt'

# Executar a função
combinar_go_terms(input_file, output_file)
________________________________________________________________
