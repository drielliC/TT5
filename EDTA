tutorial EDTA: Extensive De Novo TE Annotator
by Driellic
___________________________________
Sequences derived from TEs (both intact elements and TE fragments) 
Classification: Wicker et al.2007. This system includes hierarchical
levels of class, subclass, order, superfamily, family, and subfamily
and uses three-letter codes to denote the class-order-superfamily of
a TE. 
 Class I TEs are also called retrotransposons, which rely on an RNA intermediate to transpose;
Class II TEs are called DNA transposons because they do not use RNA for transposition.
There are five orders in Class I TEs: LTR-RT, DIRS, PLE, LINE, and SINE; and four orders in Class II TEs: TIR, Helitron, Crypton, and Maverick (Crypton and Maverick are absent in plant genomes).
The TE superfamily designation indicates related types based on shared characteristics including protein domains, target site specificity (if any), and length of target site duplications.

*Overview*
The EDTA package is composed of eight published programs. LTRharvest [9], LTR_FINDER_parallel [10], and LTR_retriever [11] are incorporated in this package to identify LTR retrotranspo-sons;
Generic Repeat Finder [12] and TIR-Learner [13] are included to identify TIR transposons; HelitronScanner [14] identifies Helitron transposons; RepeatModeler [15] is used to identify TEs (such as SINEs and LINEs) missed by the other structure-
based programs, and finally RepeatMasker (http://repeatmasker.org) is used to annotate fragmented TEs based on homology to structurally annotated TEs.
Besides combining and filtering the raw output candidates from the base programs, EDTA also features downstream screening that helps to minimize the false discovery rate. 
Furthermore, EDTA uses TE exemplars identified by the base programs for whole-genome TE annotation as well as evaluation of the annotation
output.

*Main Concept*
Intact TEs: Intact TEs refer to elements that retain complete TE structures including terminal repeats and protein domains. Intact TEs are often capable of transposition, but maybe silenced and/or rendered immobile due to epigenetic modification(s) [16]. 
Full-length TEs: Full-length TEs contain two terminal repeat sequences and subterminal motifs, but their internal sequences may be mutated, deleted, or rearranged. Some full-length TEs are non-autonomous due to lack of the transposase-coding
function; however, they may be mobilized by transposase provided by autonomous TEs in the same family.
Fractured TEs: Fractured TEs contain only one terminal fragment of an otherwise complete element. Fractured TEs may be able to transpose by cooperating with another nearby transposon terminus in alternative transposition reactions, if the genome
also contains an autonomous TE of the same family to provide transposase.
___________________________________
#Installation
#EDTA uses a variety of libraries such as biopython, pandas, glob, scikit-learn, tensorflow, and keras for python version. Various dependencies were also implemented in EDTA including CD-HIT, MUSCLE, mdust, and RepeatMasker. These packages and dependencies can be managed by conda. 

conda create -n EDTA
conda activate EDTA
conda install -n EDTA -y -c bioconda -c conda-forge edta

#EDTA source code is available at GitHub; clone the EDTA package and initiate it as follows:

git clone https://github.com/oushujun/EDTA
./EDTA/EDTA.pl

#Docker
#A docker version of EDTA is available through https://hub.docker.com/r/kapeel/edta. The docker version is automatically updated.
Users can avoid system and dependency conflicts by using the docker version. Users can install the docker version of EDTA and
initiate it as follows:

docker pull kapeel/edta
docker run -v $PWD:/in -w /in kapeel/edta --genome genome.fa
[other parameters]

#Singularity
#pull .sif

_______________________________
#Usage:
singularity exec edta_2.1.0--hdfd78af_1.sif perl /usr/local/bin/EDTA.pl --genome ../../Documents/alunos/driii/dataUNICAMP/yahs.PITSTA_v0.2.coll.final_mod2.chroms.fa --species others --step all --threads 10 --sensitive 1 --anno 1 --evaluate 1

_____________________________________
Output 
The outputs of raw TEs are located in the working directory in a folder named FastaName.EDTA.raw (FastaName indicates the
name of the user-defined genome fasta file). The sub-folders are named LTR, TIR, and Helitron and store the corresponding inter-
mediate results. The raw TE libraries contain both intact and full-length TEs that could be nested in each other. Filtered intact TEs
identified from the genome are reported in both the fasta format and the GFF3 format, which can be used to study the biology of
TEs. The TE output from the final step is called FastaName.fa.EDTA.TElib.fa and the whole-genome TE annotation is included
in the file FastaName.fa.EDTA.TEanno.gff3.

_____________________________________
#Script que contabilizar os tipos de elementos transponíveis (coluna feature), também calcula o tamanho total em pares de bases (bp) ocupados por cada tipo de elemento:

nano stat.py

import pandas as pd
from Bio import SeqIO

# Função para calcular o tamanho total do genoma a partir de um arquivo FASTA
def calculate_genome_size(fasta_file):
    genome_size = 0
    for record in SeqIO.parse(fasta_file, "fasta"):
        genome_size += len(record.seq)
    return genome_size

# Carregar o arquivo GFF3
gff_file = "seu_arquivo.gff3"  # Substitua pelo nome do seu arquivo
fasta_file = "seu_arquivo.fasta"  # Substitua pelo nome do seu arquivo FASTA
columns = ['seqname', 'source', 'feature', 'start', 'end', 'score', 'strand', 'frame', 'attribute']

# Calcular o tamanho total do genoma lendo o arquivo FASTA
genome_size = calculate_genome_size(fasta_file)
print(f"Tamanho total do genoma: {genome_size} bp")

# Ler o arquivo GFF3, ignorando comentários que começam com '#'
gff_data = pd.read_csv(gff_file, sep='\t', comment='#', names=columns)

# Calcular o tamanho (length) de cada elemento
gff_data['length'] = gff_data['end'] - gff_data['start'] + 1

# Agrupar por tipo de feature e calcular o número de elementos e o comprimento total (em bp) ocupado
summary = gff_data.groupby('feature').agg(
    num_elements=('feature', 'count'),
    total_length=('length', 'sum')
).reset_index()

# Calcular a porcentagem do genoma ocupada por cada tipo de elemento
summary['percent_genome'] = (summary['total_length'] / genome_size) * 100

# Exibir o resumo
print(summary)

# Exportar para um arquivo CSV se necessário
summary.to_csv("summary_TE_elements_with_genome_size.csv", index=False)

__________________________________________________
 python3 stat.py 

Tamanho total do genoma: 328429551 bp
                         feature  num_elements  total_length  percent_genome
0           CACTA_TIR_transposon           204        511777        0.155826
1      Copia_LTR_retrotransposon           376       1923968        0.585808
2      Gypsy_LTR_retrotransposon           582       4949846        1.507126
3            LTR_retrotransposon           805       9852624        2.999920
4         Mutator_TIR_transposon           334        755596        0.230063
5   PIF_Harbinger_TIR_transposon            41         75693        0.023047
6     Tc1_Mariner_TIR_transposon            19         43300        0.013184
7             hAT_TIR_transposon           234        184952        0.056314
8                       helitron            70        659630        0.200844
9           long_terminal_repeat          3526       8780942        2.673615
10                 repeat_region          1763      16744020        5.098207
11       target_site_duplication          3526         17554        0.005345


~/Desktop/SIF$ singularity exec edta_2.1.0--hdfd78af_1.sif perl /usr/local/bin/EDTA.pl --genome ../../Documents/alunos/driii/dataUNICAMP/ISCPUB_v0.2.h1_scaffolds.yahs_final_mod.fa --threads 5 --sensitive 1 --anno 1 --evaluat
e 1


############################TEsorter#########################################################
python -m TEsorter ../EDTA/ISCPUB_v0.2.h1_scaffolds.yahs_final_mod.fa.mod.EDTA.TElib.fa -p 5 -db rexdb-plant


  nano stats.py                                                                                                
import pandas as pd

# Carregar o arquivo .classify.tsv (substitua pelo caminho correto)
file_path = '~/Desktop/SIF/TEsorter/ISCPUB_v0.2.h1_scaffolds.yahs_final_mod.fa.mod.EDTA.TElib.fa.rexdb-plant.cls.tsv'  # Insira o caminho correto
df = pd.read_csv(file_path, sep='\t')

# Verifique se as colunas relevantes estão presentes
if 'Superfamily' in df.columns and 'Length' in df.columns:
    # Calcular o tamanho total do genoma somando todos os comprimentos de elementos repetitivos
    total_genome_size = df['Length'].sum()
    
    # Agrupar por 'Superfamily' e somar os comprimentos
    class_summary = df.groupby('Superfamily')['Length'].sum().reset_index()
    
    # Calcular a porcentagem de cada classe no genoma
    class_summary['Percentage'] = (class_summary['Length'] / total_genome_size) * 100
    
    # Exibir os resultados
    print("Classes de elementos repetitivos e suas porcentagens no genoma:")
    print(class_summary[['Superfamily', 'Length', 'Percentage']])
    
else:
    print("As colunas 'Superfamily' e 'Length' não foram encontradas no arquivo.")

