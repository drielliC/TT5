sudo apt-get update
sudo apt-get install trimal

#ou instalar manualmente 
#https://github.com/inab/trimal/releases

#Alinhar usando o MUSCLE, com CDS e PROTEINA juntos. (OBS:o clustaw não funciona)

##############################
#Script que trima dados faltantes de cds preservando os codons
nano  cut_codon.py

import sys
from Bio import AlignIO

def trim_alignment(input_fasta, output_fasta, threshold_percentage):
    # Calcular o threshold a partir da porcentagem
    threshold = threshold_percentage / 100.0
    
    # Carregar o alinhamento
    alignment = AlignIO.read(input_fasta, "fasta")
    
    # Calcular o número de sequências
    num_sequences = len(alignment)
    
    # Inicializar uma lista para marcar quais colunas devem ser mantidas
    columns_to_keep = []
    
    # Percorrer as colunas em blocos de códons (trios de nucleotídeos)
    for i in range(0, alignment.get_alignment_length(), 3):
        codon_columns = alignment[:, i:i+3]
        
        # Contar quantas sequências têm gaps ou caracteres faltantes no bloco de códons
        missing_count = sum(1 for codon in codon_columns if '-' in codon or '?' in codon)
        
        # Verificar se o bloco deve ser mantido (menos de threshold% de dados faltantes)
        if missing_count / num_sequences <= threshold:
            columns_to_keep.append(i)  # Marcar a posição inicial do códon
    
    # Para cada sequência, construir a nova sequência com as colunas a serem mantidas
    trimmed_sequences = []
    for record in alignment:
        new_seq = ''
        for i in columns_to_keep:
            new_seq += record.seq[i:i+3]  # Adiciona o bloco de 3 colunas
        trimmed_sequences.append((record.id, new_seq))
    
    # Escrever o novo arquivo FASTA
    with open(output_fasta, 'w') as output_file:
        for record_id, sequence in trimmed_sequences:
            output_file.write(f">{record_id}\n")
            output_file.write(str(sequence) + "\n")

if __name__ == "__main__":
    # Verificar se os argumentos foram passados corretamente
    if len(sys.argv) != 4:
        print("Uso: python cut_codon.py <percentual_de_dados_faltantes> <arquivo_de_entrada.fasta> <arquivo_de_saida.fasta>")
        sys.exit(1)
    
    # Ler os argumentos
    threshold_percentage = float(sys.argv[1].replace('%', ''))  # Remover o '%' e converter para float
    input_fasta = sys.argv[2]
    output_fasta = sys.argv[3]
    
    # Executar a função de trimming
    trim_alignment(input_fasta, output_fasta, threshold_percentage)

##########################################################################
Mudanças feitas:

    Agora, usamos record.seq[i:i+3] para pegar o bloco de códons da sequência correspondente a uma sequência específica.
    A lista columns_to_keep guarda a posição inicial de cada bloco de códons que será mantido.
    A construção da sequência final para cada gene é feita concatenando apenas os blocos que foram marcados como válidos.

#USAGE
python3 cut_codon.py 20 muscle_56seqs_CYP86_cds.fas trimmed20_muscle_56seqs_CYP86_cds.fas
diminuindo o valor diminui os dados faltantes aumenta o corte
###########################
SELEÇÃO NO EASYCODEML  interface gráfica 

#download easycodeml
https://github.com/BioEasy/EasyCodeML
#pra rodar 
cd ~/Downloads/EasyCodeML
java -jar EasyCodeML.jar

