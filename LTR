wget https://sourceforge.net/projects/ltr-finder/files/LTR_FINDER_v1.07.tar.gz
tar -zxvf LTR_FINDER_v1.07.tar.gz
cd LTR_FINDER_v1.07
make
cd build
ls
./build.sh
# ou
./configure
cd ../source
ls
echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
source ~/.bashrc
./ltr_finder genome_file.fasta > ltr_results.txt
perl genome_plot.pl ltr_results.txt > genome_ltr_figure.svg

./ltr_finder genome_file.fasta -D 15000 -d 1000 -C > ltr_results.txt
-w: Exibe a pontuação dos hits de LTR.
-f /dev/stderr: Envia a saída do log para o stderr (erro padrão).
-D e -d: Especificam a distância máxima e mínima entre LTRs.
-C: Ativa a busca por cauda poli-A/T.


LTRharvest:
wget https://github.com/genometools/genometools/archive/refs/tags/v1.6.2.tar.gz
tar -zxvf v1.6.2.tar.gz
cd genometools-1.6.2
make 64bit=yes
echo "export PATH=\$PATH:$PWD/bin" >> ~/.bashrc
source ~/.bashrc
gt suffixerator -db genome_file.fasta -indexname genome_index -tis -suf -lcp -des -ssp -sds -dna
gt ltrharvest -index genome_index -minlenltr 100 -maxlenltr 5000 -mintsd 4 -maxtsd 20 > ltrharvest_results.txt
Onde:

genome_index: O índice criado com o suffixerator.
minlenltr: O comprimento mínimo das LTRs.
maxlenltr: O comprimento máximo das LTRs.
mintsd e maxtsd: Os comprimentos mínimo e máximo de TSDS (Target Site Duplications).



Passos para baixar e instalar o LTR_retriever:
Baixar o LTR_retriever:

Você pode baixar o LTR_retriever diretamente do GitHub:

bash
Copiar código
wget https://github.com/oushujun/LTR_retriever/archive/refs/heads/master.zip
Descompactar o arquivo:

Após o download, descompacte o arquivo .zip:

bash
Copiar código
unzip master.zip
Navegue até o diretório descompactado:

bash
Copiar código
cd LTR_retriever-master
Instalar dependências:

O LTR_retriever requer algumas ferramentas adicionais para funcionar corretamente:

GNU parallel: Para rodar tarefas em paralelo.
BEDTools: Para manipulação de dados de intervalos genômicos.
BLAST+: Para comparar sequências.
LTR_FINDER ou LTRharvest: Para gerar as predições brutas de LTRs.
Instale as dependências com os seguintes comandos (para sistemas baseados em Debian/Ubuntu):

bash
Copiar código
sudo apt-get install parallel bedtools ncbi-blast+ ltr_finder
Se precisar do LTRharvest, ele faz parte do GenomeTools:

bash
Copiar código
wget https://github.com/genometools/genometools/archive/refs/tags/v1.6.2.tar.gz
tar -zxvf v1.6.2.tar.gz
cd genometools-1.6.2
make 64bit=yes
Você também pode configurar o LTRharvest seguindo o guia anterior.

Adicionar o LTR_retriever ao seu $PATH:

Para facilitar a execução do LTR_retriever de qualquer lugar, adicione-o ao seu $PATH:

bash
Copiar código
echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
source ~/.bashrc
Como usar o LTR_retriever:
Depois de ter o LTRharvest ou LTR_FINDER configurado e ter gerado as predições LTR, você pode usar o LTR_retriever para refiná-las.

Gerar as predições brutas de LTRs:

Primeiro, rode o LTRharvest ou LTR_FINDER para gerar os resultados brutos.

Com o LTRharvest:

bash
Copiar código
gt suffixerator -db genome_file.fasta -indexname genome_index -tis -suf -lcp -des -ssp -sds -dna
gt ltrharvest -index genome_index -minlenltr 100 -maxlenltr 5000 -mintsd 4 -maxtsd 20 > ltrharvest_output.txt
Ou com o LTR_FINDER:

bash
Copiar código
./ltr_finder genome_file.fasta > ltrfinder_output.txt
Rodar o LTR_retriever:

########################################################
Uma vez que você tenha o arquivo de saída das ferramentas de detecção, use o LTR_retriever para refinar os resultados:
# Baixe o LTR_retriever
git clone https://github.com/oushujun/LTR_retriever.git

# Vá para o diretório do LTR_retriever
cd LTR_retriever

# Dê permissão de execução para o script principal
chmod +x LTR_retriever

# Adicione o LTR_retriever ao seu PATH para facilitar o uso
export PATH=$PATH:/caminho/para/LTR_retriever

# Download the latest version of RepeatModeler
wget http://www.repeatmasker.org/RepeatModeler/RepeatModeler-2.0.tar.gz

# Extract the downloaded file
tar -xvzf RepeatModeler-2.0.tar.gz

# Move to the RepeatModeler directory
cd RepeatModeler-2.0/

Preparação do Índice do Genoma:

    O LTR_retriever requer um índice do genoma gerado por uma ferramenta como o RepeatMasker ou RepeatModeler.

Exemplo de Índice de Genoma com RepeatModeler:

# Suponha que seu genoma esteja no arquivo "genome.fasta"
# Crie um banco de dados para o RepeatModeler
BuildDatabase -name genome_db genome.fasta

# Execute o RepeatModeler para criar um índice de repetição
RepeatModeler -database genome_db


bash
Copiar código
LTR_retriever -genome genome_file.fasta -inharvest ltrharvest_output.txt -threads 4
Ou para o LTR_FINDER:

bash
Copiar código
LTR_retriever -genome genome_file.fasta -infinder ltrfinder_output.txt -threads 4
Aqui, -threads 4 especifica o uso de 4 threads para acelerar a análise.

Analisar os resultados:

O LTR_retriever gera um conjunto refinado de anotações LTR no formato GFF3 e outras saídas que incluem detalhes sobre a idade dos elementos e uma classificação mais precisa.

Saída do LTR_retriever:
LTR_retriever.results.gff3: Arquivo com as anotações refinadas.
LTR_retriever.summary: Um resumo com detalhes sobre o número de LTRs identificados e outros dados.



#######################################################################################################################################################################
import pandas as pd

# Função para processar o arquivo LTR Finder
def process_ltr_finder(file_path):
    with open(file_path, 'r') as f:
        data = []
        scaffold = None
        start, end = None, None
        for line in f:
            if line.startswith('>Sequence:'):
                scaffold = line.split()[1]
            if line.startswith('Location :'):
                start, end = map(int, line.split()[2:5:2])  # Extrair início e fim
                data.append((scaffold, start, end))
    return pd.DataFrame(data, columns=['scaffold', 'start', 'end'])

# Função para processar o arquivo LTR Harvest, lidando com linhas inconsistentes
def process_ltr_harvest(file_path):
    data = []
    with open(file_path, 'r') as f:
        for line in f:
            # Ignorar linhas de cabeçalho ou comentários
            if line.startswith('#'):
                continue
            # Dividir a linha em colunas, mas ignorar se o número de colunas estiver incorreto
            columns = line.split()
            if len(columns) == 11:  # Esperamos 11 colunas
                data.append(columns)
            else:
                print(f"Linha ignorada devido ao número inesperado de colunas: {line.strip()}")
    # Converter para DataFrame
    return pd.DataFrame(data, columns=['start', 'end', 'l(ret)', 'start_lLTR', 'end_lLTR', 'l(lLTR)', 'start_rLTR', 'end_rLTR', 'l(rLTR)', 'similarity', 'seq_nr'])

# Carregar os arquivos e processar
ltr_finder_data = process_ltr_finder('LTR_ISC_results.txt')
ltr_harvest_data = process_ltr_harvest('ltrharvest_results.txt')

# Converter as colunas 'start' e 'end' para int64 em ambos os DataFrames
ltr_finder_data['start'] = ltr_finder_data['start'].astype('int64')
ltr_finder_data['end'] = ltr_finder_data['end'].astype('int64')

ltr_harvest_data['start'] = ltr_harvest_data['start'].astype('int64')
ltr_harvest_data['end'] = ltr_harvest_data['end'].astype('int64')

# Combinar os dados
combined_ltrs = pd.merge(ltr_finder_data, ltr_harvest_data, left_on=['start', 'end'], right_on=['start', 'end'], how='outer', indicator=True)

# Exibir resultados
print(f"Elementos LTR preditos por ambas as ferramentas: {combined_ltrs[combined_ltrs['_merge'] == 'both'].shape[0]}")
print(f"Elementos LTR preditos apenas pelo LTR Finder: {combined_ltrs[combined_ltrs['_merge'] == 'left_only'].shape[0]}")
print(f"Elementos LTR preditos apenas pelo LTR Harvest: {combined_ltrs[combined_ltrs['_merge'] == 'right_only'].shape[0]}")

# Salvar os resultados combinados em um arquivo CSV
combined_ltrs.to_csv('combined_ltr_predictions.csv', index=False)

###########################################################
import pandas as pd
import sys

def calculate_ltr_percentage(csv_file, total_genome_size):
    """Calcula a porcentagem de LTR no genoma com base nas predições de LTR em um arquivo CSV."""
    
    # Carregar o arquivo CSV
    df = pd.read_csv(csv_file)

    # Verificar se as colunas 'start' e 'end' existem e filtrar linhas válidas
    if 'start' not in df.columns or 'end' not in df.columns:
        print("Erro: O arquivo CSV deve conter as colunas 'start' e 'end'.")
        sys.exit(1)

    # Filtrar linhas onde 'start' e 'end' não são valores nulos
    df = df.dropna(subset=['start', 'end'])

    # Converter as colunas 'start' e 'end' para inteiros (caso estejam como string/float)
    df['start'] = df['start'].astype(int)
    df['end'] = df['end'].astype(int)

    # Calcular o tamanho total das regiões LTR
    df['LTR_size'] = df['end'] - df['start'] + 1
    total_ltr_size = df['LTR_size'].sum()

    # Calcular a porcentagem de LTR no genoma
    ltr_percentage = (total_ltr_size / total_genome_size) * 100

    return total_ltr_size, ltr_percentage

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Uso: python ltr_percentage.py <arquivo_csv> <tamanho_total_genoma>")
        sys.exit(1)

    csv_file = sys.argv[1]
    total_genome_size = int(sys.argv[2])

    # Calcular a porcentagem de LTR
    total_ltr_size, ltr_percentage = calculate_ltr_percentage(csv_file, total_genome_size)

    # Exibir os resultados
    print(f"Tamanho total de LTRs preditas: {total_ltr_size} bases")
    print(f"Tamanho total do genoma: {total_genome_size} bases")
    print(f"Porcentagem de LTRs no genoma: {ltr_percentage:.2f}%")



