###############LTR FINDER##############################################
wget https://sourceforge.net/projects/ltr-finder/files/LTR_FINDER_v1.07.tar.gz
tar -zxvf LTR_FINDER_v1.07.tar.gz
cd LTR_FINDER_v1.07
make
cd build
ls
./build.sh
# ou
./configure
cd ../source
ls
echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
source ~/.bashrc
./ltr_finder genome_file.fasta > ltr_results.txt
perl genome_plot.pl ltr_results.txt > genome_ltr_figure.svg

./ltr_finder genome_file.fasta -D 15000 -d 1000 -C > ltr_results.txt
-w: Exibe a pontuação dos hits de LTR.
-f /dev/stderr: Envia a saída do log para o stderr (erro padrão).
-D e -d: Especificam a distância máxima e mínima entre LTRs.
-C: Ativa a busca por cauda poli-A/T.


###############LTRharvest##############################################
wget https://github.com/genometools/genometools/archive/refs/tags/v1.6.2.tar.gz
tar -zxvf v1.6.2.tar.gz
cd genometools-1.6.2
make 64bit=yes
echo "export PATH=\$PATH:$PWD/bin" >> ~/.bashrc
source ~/.bashrc

ou 
wget https://github.com/oushujun/LTR_retriever/archive/refs/heads/master.zip
unzip master.zip
cd LTR_retriever-master
sudo apt-get install parallel bedtools ncbi-blast+ ltr_finder

ou
wget https://github.com/genometools/genometools/archive/refs/tags/v1.6.2.tar.gz
tar -zxvf v1.6.2.tar.gz
cd genometools-1.6.2
make 64bit=yes
echo "export PATH=\$PATH:$PWD" >> ~/.bashrc
source ~/.bashrc

#USAGE
gt suffixerator -db genome_file.fasta -indexname genome_index -tis -suf -lcp -des -ssp -sds -dna
gt ltrharvest -index genome_index -minlenltr 100 -maxlenltr 5000 -mintsd 4 -maxtsd 20 > ltrharvest_results.txt

Onde:
genome_index: O índice criado com o suffixerator.
minlenltr: O comprimento mínimo das LTRs.
maxlenltr: O comprimento máximo das LTRs.
mintsd e maxtsd: Os comprimentos mínimo e máximo de TSDS (Target Site Duplications).


############### LTR_retriever##############################################
1. Download Miniconda Installer Linux:

wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

2. Install Miniconda

chmod +x Miniconda3-latest-Linux-x86_64.sh
./Miniconda3-latest-Linux-x86_64.sh

 #Follow the instructions during the installation process. You will need to agree to the license agreement and choose the installation path. It's usually fine to accept the default options.
    At the end of the installation, you’ll be prompted to initialize Miniconda and set up the Conda environment. You can allow this by typing yes.

3. Activate Conda

source ~/.bashrc
source ~/.zshrc
conda activate
conda --version

conda install -c bioconda ltr_retriever
conda install -c bioconda perl-text-soundex

conda config --add channels conda-forge
conda config --add channels bioconda
conda config --set channel_priority strict
conda install perl-text-soundex ltr_retriever


4. Preparação do Índice do Genoma:

    O LTR_retriever requer um índice do genoma gerado por uma ferramenta como o RepeatMasker ou RepeatModeler.

Exemplo de Índice de Genoma com RepeatModeler:

# Suponha que seu genoma esteja no arquivo "genome.fasta"
# Crie um banco de dados para o RepeatModeler
conda install -c bioconda repeatmasker rmblast ncbi-blast trf
conda install -c bioconda repeatmodeler

BuildDatabase -name genome_db genome.fasta

# Execute o RepeatModeler para criar um índice de repetição
RepeatModeler -database genome_db

LTR_retriever -genome genome.fa -inharvest LTRharvest_results.out -infinder LTR_FINDER_results.out -threads 4

LTR_retriever.results.gff3: Arquivo com as anotações refinadas.
LTR_retriever.summary: Um resumo com detalhes sobre o número de LTRs identificados e outros dados.

#######################################################################################################################################################################
import pandas as pd

# Função para processar o arquivo LTR Finder
def process_ltr_finder(file_path):
    with open(file_path, 'r') as f:
        data = []
        scaffold = None
        start, end = None, None
        for line in f:
            if line.startswith('>Sequence:'):
                scaffold = line.split()[1]
            if line.startswith('Location :'):
                start, end = map(int, line.split()[2:5:2])  # Extrair início e fim
                data.append((scaffold, start, end))
    return pd.DataFrame(data, columns=['scaffold', 'start', 'end'])

# Função para processar o arquivo LTR Harvest, lidando com linhas inconsistentes
def process_ltr_harvest(file_path):
    data = []
    with open(file_path, 'r') as f:
        for line in f:
            # Ignorar linhas de cabeçalho ou comentários
            if line.startswith('#'):
                continue
            # Dividir a linha em colunas, mas ignorar se o número de colunas estiver incorreto
            columns = line.split()
            if len(columns) == 11:  # Esperamos 11 colunas
                data.append(columns)
            else:
                print(f"Linha ignorada devido ao número inesperado de colunas: {line.strip()}")
    # Converter para DataFrame
    return pd.DataFrame(data, columns=['start', 'end', 'l(ret)', 'start_lLTR', 'end_lLTR', 'l(lLTR)', 'start_rLTR', 'end_rLTR', 'l(rLTR)', 'similarity', 'seq_nr'])

# Carregar os arquivos e processar
ltr_finder_data = process_ltr_finder('LTR_ISC_results.txt')
ltr_harvest_data = process_ltr_harvest('ltrharvest_results.txt')

# Converter as colunas 'start' e 'end' para int64 em ambos os DataFrames
ltr_finder_data['start'] = ltr_finder_data['start'].astype('int64')
ltr_finder_data['end'] = ltr_finder_data['end'].astype('int64')

ltr_harvest_data['start'] = ltr_harvest_data['start'].astype('int64')
ltr_harvest_data['end'] = ltr_harvest_data['end'].astype('int64')

# Combinar os dados
combined_ltrs = pd.merge(ltr_finder_data, ltr_harvest_data, left_on=['start', 'end'], right_on=['start', 'end'], how='outer', indicator=True)

# Exibir resultados
print(f"Elementos LTR preditos por ambas as ferramentas: {combined_ltrs[combined_ltrs['_merge'] == 'both'].shape[0]}")
print(f"Elementos LTR preditos apenas pelo LTR Finder: {combined_ltrs[combined_ltrs['_merge'] == 'left_only'].shape[0]}")
print(f"Elementos LTR preditos apenas pelo LTR Harvest: {combined_ltrs[combined_ltrs['_merge'] == 'right_only'].shape[0]}")

# Salvar os resultados combinados em um arquivo CSV
combined_ltrs.to_csv('combined_ltr_predictions.csv', index=False)

###########################################################
import pandas as pd
import sys

def calculate_ltr_percentage(csv_file, total_genome_size):
    """Calcula a porcentagem de LTR no genoma com base nas predições de LTR em um arquivo CSV."""
    
    # Carregar o arquivo CSV
    df = pd.read_csv(csv_file)

    # Verificar se as colunas 'start' e 'end' existem e filtrar linhas válidas
    if 'start' not in df.columns or 'end' not in df.columns:
        print("Erro: O arquivo CSV deve conter as colunas 'start' e 'end'.")
        sys.exit(1)

    # Filtrar linhas onde 'start' e 'end' não são valores nulos
    df = df.dropna(subset=['start', 'end'])

    # Converter as colunas 'start' e 'end' para inteiros (caso estejam como string/float)
    df['start'] = df['start'].astype(int)
    df['end'] = df['end'].astype(int)

    # Calcular o tamanho total das regiões LTR
    df['LTR_size'] = df['end'] - df['start'] + 1
    total_ltr_size = df['LTR_size'].sum()

    # Calcular a porcentagem de LTR no genoma
    ltr_percentage = (total_ltr_size / total_genome_size) * 100

    return total_ltr_size, ltr_percentage

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Uso: python ltr_percentage.py <arquivo_csv> <tamanho_total_genoma>")
        sys.exit(1)

    csv_file = sys.argv[1]
    total_genome_size = int(sys.argv[2])

    # Calcular a porcentagem de LTR
    total_ltr_size, ltr_percentage = calculate_ltr_percentage(csv_file, total_genome_size)

    # Exibir os resultados
    print(f"Tamanho total de LTRs preditas: {total_ltr_size} bases")
    print(f"Tamanho total do genoma: {total_genome_size} bases")
    print(f"Porcentagem de LTRs no genoma: {ltr_percentage:.2f}%")



